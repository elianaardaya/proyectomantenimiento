//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using OrmLib;

namespace dbMantenimientoBiz
{
	/// <summary>
	/// Offers a way to map join paths from the table you wish to fetch,
	/// to the table whose criteria you wish to constrain.
	/// <seealso cref="DataManager"/>
	/// </summary>
	/// <remarks>
	/// This custom extended enumerator type is only used by the <see cref="DataManager"/>.
	/// </remarks>
	public class JoinPath
	{
		private JoinPath(){}
		
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.aprobacionRelation aprobacion{ get { return new JoinPath._.aprobacionRelation(new ArrayList(), "aprobacion"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.componenteRelation componente{ get { return new JoinPath._.componenteRelation(new ArrayList(), "componente"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.detalle_reparoRelation detalle_reparo{ get { return new JoinPath._.detalle_reparoRelation(new ArrayList(), "detalle_reparo"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.detalleComponenteRelation detalleComponente{ get { return new JoinPath._.detalleComponenteRelation(new ArrayList(), "detalleComponente"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.empresaRelation empresa{ get { return new JoinPath._.empresaRelation(new ArrayList(), "empresa"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.funcionRelation funcion{ get { return new JoinPath._.funcionRelation(new ArrayList(), "funcion"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.inventarioRelation inventario{ get { return new JoinPath._.inventarioRelation(new ArrayList(), "inventario"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.linea_produccionRelation linea_produccion{ get { return new JoinPath._.linea_produccionRelation(new ArrayList(), "linea_produccion"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.maquinaRelation maquina{ get { return new JoinPath._.maquinaRelation(new ArrayList(), "maquina"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.material_herramientaRelation material_herramienta{ get { return new JoinPath._.material_herramientaRelation(new ArrayList(), "material_herramienta"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.materialusadoRelation materialusado{ get { return new JoinPath._.materialusadoRelation(new ArrayList(), "materialusado"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.privilegioRelation privilegio{ get { return new JoinPath._.privilegioRelation(new ArrayList(), "privilegio"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.problemaRelation problema{ get { return new JoinPath._.problemaRelation(new ArrayList(), "problema"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.proveedorRelation proveedor{ get { return new JoinPath._.proveedorRelation(new ArrayList(), "proveedor"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.recomendacionRelation recomendacion{ get { return new JoinPath._.recomendacionRelation(new ArrayList(), "recomendacion"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.rolRelation rol{ get { return new JoinPath._.rolRelation(new ArrayList(), "rol"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.solicitudRelation solicitud{ get { return new JoinPath._.solicitudRelation(new ArrayList(), "solicitud"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.sysdiagramsRelation sysdiagrams{ get { return new JoinPath._.sysdiagramsRelation(new ArrayList(), "sysdiagrams"); } } 
		/// <summary>
		/// Map the constraint through this table.
		/// </summary>
		public static JoinPath._.UsuarioRelation Usuario{ get { return new JoinPath._.UsuarioRelation(new ArrayList(), "Usuario"); } } 

		/// <summary>
		/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
		/// </summary>
		[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
		public class _
		{
			private _(){}


			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class aprobacionRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal aprobacionRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public aprobacionColumns Columns { get { return new aprobacionColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.solicitudRelation solicitud
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("solicitud","id","aprobacion","idMantenimiento", this.OrmAlias, this.OrmAlias + "_soli7", true));
						return new JoinPath._.solicitudRelation( RelationList, this.OrmAlias + "_soli7"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsuarioRelation Usuario
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Usuario","id","aprobacion","idusuario", this.OrmAlias, this.OrmAlias + "_Usua18", true));
						return new JoinPath._.UsuarioRelation( RelationList, this.OrmAlias + "_Usua18"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class componenteRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal componenteRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public componenteColumns Columns { get { return new componenteColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalleComponenteRelation detalleComponente
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("componente","id","detalleComponente","id_componente", this.OrmAlias, this.OrmAlias + "_deta1", false));
						return new JoinPath._.detalleComponenteRelation( RelationList, this.OrmAlias + "_deta1"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.proveedorRelation proveedor
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("proveedor","id","componente","idproveedor", this.OrmAlias, this.OrmAlias + "_prov14", true));
						return new JoinPath._.proveedorRelation( RelationList, this.OrmAlias + "_prov14"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class detalle_reparoRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal detalle_reparoRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public detalle_reparoColumns Columns { get { return new detalle_reparoColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalleComponenteRelation detalleComponente
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("detalle_reparo","id","detalleComponente","id_reparo", this.OrmAlias, this.OrmAlias + "_deta2", false));
						return new JoinPath._.detalleComponenteRelation( RelationList, this.OrmAlias + "_deta2"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.materialusadoRelation materialusado
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("detalle_reparo","id","materialusado","id_reparo", this.OrmAlias, this.OrmAlias + "_mate3", false));
						return new JoinPath._.materialusadoRelation( RelationList, this.OrmAlias + "_mate3"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.maquinaRelation maquina
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","detalle_reparo","idmaquina", this.OrmAlias, this.OrmAlias + "_maqu8", true));
						return new JoinPath._.maquinaRelation( RelationList, this.OrmAlias + "_maqu8"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.problemaRelation problema
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("problema","id","detalle_reparo","idproblema", this.OrmAlias, this.OrmAlias + "_prob13", true));
						return new JoinPath._.problemaRelation( RelationList, this.OrmAlias + "_prob13"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsuarioRelation Usuario
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Usuario","id","detalle_reparo","idusuario", this.OrmAlias, this.OrmAlias + "_Usua19", true));
						return new JoinPath._.UsuarioRelation( RelationList, this.OrmAlias + "_Usua19"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class detalleComponenteRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal detalleComponenteRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public detalleComponenteColumns Columns { get { return new detalleComponenteColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.componenteRelation componente
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("componente","id","detalleComponente","id_componente", this.OrmAlias, this.OrmAlias + "_comp1", true));
						return new JoinPath._.componenteRelation( RelationList, this.OrmAlias + "_comp1"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalle_reparoRelation detalle_reparo
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("detalle_reparo","id","detalleComponente","id_reparo", this.OrmAlias, this.OrmAlias + "_deta2", true));
						return new JoinPath._.detalle_reparoRelation( RelationList, this.OrmAlias + "_deta2"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class empresaRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal empresaRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public empresaColumns Columns { get { return new empresaColumns(RelationList, this.OrmAlias); } } 



			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class funcionRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal funcionRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public funcionColumns Columns { get { return new funcionColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.privilegioRelation privilegio
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("funcion","id","privilegio","idfuncion", this.OrmAlias, this.OrmAlias + "_priv4", false));
						return new JoinPath._.privilegioRelation( RelationList, this.OrmAlias + "_priv4"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class inventarioRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal inventarioRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public inventarioColumns Columns { get { return new inventarioColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.materialusadoRelation materialusado
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("inventario","id","materialusado","idmaterial", this.OrmAlias, this.OrmAlias + "_mate5", false));
						return new JoinPath._.materialusadoRelation( RelationList, this.OrmAlias + "_mate5"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.material_herramientaRelation material_herramienta
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("material_herramienta","id","inventario","idmaterial", this.OrmAlias, this.OrmAlias + "_mate12", true));
						return new JoinPath._.material_herramientaRelation( RelationList, this.OrmAlias + "_mate12"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class linea_produccionRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal linea_produccionRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public linea_produccionColumns Columns { get { return new linea_produccionColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.maquinaRelation maquina
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("linea_produccion","id","maquina","idlinea", this.OrmAlias, this.OrmAlias + "_maqu6", false));
						return new JoinPath._.maquinaRelation( RelationList, this.OrmAlias + "_maqu6"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class maquinaRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal maquinaRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public maquinaColumns Columns { get { return new maquinaColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalle_reparoRelation detalle_reparo
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","detalle_reparo","idmaquina", this.OrmAlias, this.OrmAlias + "_deta8", false));
						return new JoinPath._.detalle_reparoRelation( RelationList, this.OrmAlias + "_deta8"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.problemaRelation problema
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","problema","idmaquina", this.OrmAlias, this.OrmAlias + "_prob9", false));
						return new JoinPath._.problemaRelation( RelationList, this.OrmAlias + "_prob9"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.recomendacionRelation recomendacion
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","recomendacion","idmaquina", this.OrmAlias, this.OrmAlias + "_reco10", false));
						return new JoinPath._.recomendacionRelation( RelationList, this.OrmAlias + "_reco10"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.solicitudRelation solicitud
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","solicitud","idMaquina", this.OrmAlias, this.OrmAlias + "_soli11", false));
						return new JoinPath._.solicitudRelation( RelationList, this.OrmAlias + "_soli11"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.linea_produccionRelation linea_produccion
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("linea_produccion","id","maquina","idlinea", this.OrmAlias, this.OrmAlias + "_line6", true));
						return new JoinPath._.linea_produccionRelation( RelationList, this.OrmAlias + "_line6"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class material_herramientaRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal material_herramientaRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public material_herramientaColumns Columns { get { return new material_herramientaColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.inventarioRelation inventario
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("material_herramienta","id","inventario","idmaterial", this.OrmAlias, this.OrmAlias + "_inve12", false));
						return new JoinPath._.inventarioRelation( RelationList, this.OrmAlias + "_inve12"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.proveedorRelation proveedor
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("proveedor","id","material_herramienta","idproveedor", this.OrmAlias, this.OrmAlias + "_prov15", true));
						return new JoinPath._.proveedorRelation( RelationList, this.OrmAlias + "_prov15"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class materialusadoRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal materialusadoRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public materialusadoColumns Columns { get { return new materialusadoColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalle_reparoRelation detalle_reparo
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("detalle_reparo","id","materialusado","id_reparo", this.OrmAlias, this.OrmAlias + "_deta3", true));
						return new JoinPath._.detalle_reparoRelation( RelationList, this.OrmAlias + "_deta3"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.inventarioRelation inventario
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("inventario","id","materialusado","idmaterial", this.OrmAlias, this.OrmAlias + "_inve5", true));
						return new JoinPath._.inventarioRelation( RelationList, this.OrmAlias + "_inve5"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class privilegioRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal privilegioRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public privilegioColumns Columns { get { return new privilegioColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.funcionRelation funcion
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("funcion","id","privilegio","idfuncion", this.OrmAlias, this.OrmAlias + "_func4", true));
						return new JoinPath._.funcionRelation( RelationList, this.OrmAlias + "_func4"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.rolRelation rol
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("rol","id","privilegio","idrol", this.OrmAlias, this.OrmAlias + "_rol17", true));
						return new JoinPath._.rolRelation( RelationList, this.OrmAlias + "_rol17"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class problemaRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal problemaRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public problemaColumns Columns { get { return new problemaColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalle_reparoRelation detalle_reparo
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("problema","id","detalle_reparo","idproblema", this.OrmAlias, this.OrmAlias + "_deta13", false));
						return new JoinPath._.detalle_reparoRelation( RelationList, this.OrmAlias + "_deta13"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.maquinaRelation maquina
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","problema","idmaquina", this.OrmAlias, this.OrmAlias + "_maqu9", true));
						return new JoinPath._.maquinaRelation( RelationList, this.OrmAlias + "_maqu9"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class proveedorRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal proveedorRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public proveedorColumns Columns { get { return new proveedorColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.componenteRelation componente
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("proveedor","id","componente","idproveedor", this.OrmAlias, this.OrmAlias + "_comp14", false));
						return new JoinPath._.componenteRelation( RelationList, this.OrmAlias + "_comp14"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.material_herramientaRelation material_herramienta
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("proveedor","id","material_herramienta","idproveedor", this.OrmAlias, this.OrmAlias + "_mate15", false));
						return new JoinPath._.material_herramientaRelation( RelationList, this.OrmAlias + "_mate15"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class recomendacionRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal recomendacionRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public recomendacionColumns Columns { get { return new recomendacionColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.maquinaRelation maquina
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","recomendacion","idmaquina", this.OrmAlias, this.OrmAlias + "_maqu10", true));
						return new JoinPath._.maquinaRelation( RelationList, this.OrmAlias + "_maqu10"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class rolRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal rolRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public rolColumns Columns { get { return new rolColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsuarioRelation Usuario
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("rol","id","Usuario","idrol", this.OrmAlias, this.OrmAlias + "_Usua16", false));
						return new JoinPath._.UsuarioRelation( RelationList, this.OrmAlias + "_Usua16"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.privilegioRelation privilegio
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("rol","id","privilegio","idrol", this.OrmAlias, this.OrmAlias + "_priv17", false));
						return new JoinPath._.privilegioRelation( RelationList, this.OrmAlias + "_priv17"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class solicitudRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal solicitudRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public solicitudColumns Columns { get { return new solicitudColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.aprobacionRelation aprobacion
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("solicitud","id","aprobacion","idMantenimiento", this.OrmAlias, this.OrmAlias + "_apro7", false));
						return new JoinPath._.aprobacionRelation( RelationList, this.OrmAlias + "_apro7"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.maquinaRelation maquina
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("maquina","id","solicitud","idMaquina", this.OrmAlias, this.OrmAlias + "_maqu11", true));
						return new JoinPath._.maquinaRelation( RelationList, this.OrmAlias + "_maqu11"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.UsuarioRelation Usuario
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Usuario","id","solicitud","idusuario", this.OrmAlias, this.OrmAlias + "_Usua20", true));
						return new JoinPath._.UsuarioRelation( RelationList, this.OrmAlias + "_Usua20"); 
					}
				}

				

			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class sysdiagramsRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal sysdiagramsRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public sysdiagramsColumns Columns { get { return new sysdiagramsColumns(RelationList, this.OrmAlias); } } 



			}
			
			/// <summary>
			/// Map the constraint through this relationship.
			/// </summary>
			public class UsuarioRelation : DataManagerBase.JoinPathRelation
			{
				/// <summary>
				/// Default Constructor.
				/// </summary>
				/// <remarks>
				/// Do not construct directly
				/// </remarks>
				internal UsuarioRelation(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias;}
			
				/// <summary>
				/// When the table is reached that a constarint needs to be placed on, use this property to access 
				/// the column.
				/// </summary>
				public UsuarioColumns Columns { get { return new UsuarioColumns(RelationList, this.OrmAlias); } } 


				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.aprobacionRelation aprobacion
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Usuario","id","aprobacion","idusuario", this.OrmAlias, this.OrmAlias + "_apro18", false));
						return new JoinPath._.aprobacionRelation( RelationList, this.OrmAlias + "_apro18"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.detalle_reparoRelation detalle_reparo
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Usuario","id","detalle_reparo","idusuario", this.OrmAlias, this.OrmAlias + "_deta19", false));
						return new JoinPath._.detalle_reparoRelation( RelationList, this.OrmAlias + "_deta19"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.solicitudRelation solicitud
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("Usuario","id","solicitud","idusuario", this.OrmAlias, this.OrmAlias + "_soli20", false));
						return new JoinPath._.solicitudRelation( RelationList, this.OrmAlias + "_soli20"); 
					}
				}

				
				/// <summary>
				/// Map the constraint through this relationship.
				/// </summary>
				public JoinPath._.rolRelation rol
				{
					get
					{
						RelationList.Add(new DataManagerBase.Relation("rol","id","Usuario","idrol", this.OrmAlias, this.OrmAlias + "_rol16", true));
						return new JoinPath._.rolRelation( RelationList, this.OrmAlias + "_rol16"); 
					}
				}

				

			}
			
		

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class aprobacionColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal aprobacionColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("aprobacion","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idMantenimiento
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idMantenimiento
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("aprobacion","idMantenimiento","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idusuario
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idusuario
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("aprobacion","idusuario","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class componenteColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal componenteColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("componente","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("componente","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the marca
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation marca
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("componente","marca","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idproveedor
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idproveedor
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("componente","idproveedor","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("componente","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class detalle_reparoColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal detalle_reparoColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the idmaquina
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idmaquina
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalle_reparo","idmaquina","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the fecha
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation fecha
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalle_reparo","fecha","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalle_reparo","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idusuario
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idusuario
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalle_reparo","idusuario","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idproblema
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idproblema
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalle_reparo","idproblema","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalle_reparo","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class detalleComponenteColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal detalleComponenteColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id_componente
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id_componente
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalleComponente","id_componente","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the id_reparo
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id_reparo
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalleComponente","id_reparo","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the cantidad
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation cantidad
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalleComponente","cantidad","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the monto
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation monto
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalleComponente","monto","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("detalleComponente","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class empresaColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal empresaColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("empresa","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("empresa","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the rubro
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation rubro
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("empresa","rubro","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the direccion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation direccion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("empresa","direccion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the telefono
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation telefono
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("empresa","telefono","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the imagen
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation imagen
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("empresa","imagen","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class funcionColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal funcionColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("funcion","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("funcion","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class inventarioColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal inventarioColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("inventario","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idmaterial
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idmaterial
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("inventario","idmaterial","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the cantidad
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation cantidad
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("inventario","cantidad","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class linea_produccionColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal linea_produccionColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("linea_produccion","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("linea_produccion","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the descripcion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation descripcion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("linea_produccion","descripcion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("linea_produccion","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class maquinaColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal maquinaColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the marca
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation marca
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","marca","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the anho
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation anho
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","anho","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the industria
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation industria
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","industria","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the funcion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation funcion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","funcion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the caracteristicas
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation caracteristicas
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","caracteristicas","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idlinea
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idlinea
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","idlinea","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado2
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado2
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("maquina","estado2","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class material_herramientaColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal material_herramientaColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("material_herramienta","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("material_herramienta","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the marca
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation marca
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("material_herramienta","marca","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idproveedor
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idproveedor
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("material_herramienta","idproveedor","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the precio
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation precio
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("material_herramienta","precio","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("material_herramienta","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class materialusadoColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal materialusadoColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("materialusado","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idmaterial
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idmaterial
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("materialusado","idmaterial","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the cantidad
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation cantidad
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("materialusado","cantidad","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the id_reparo
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id_reparo
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("materialusado","id_reparo","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class privilegioColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal privilegioColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("privilegio","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idrol
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idrol
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("privilegio","idrol","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idfuncion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idfuncion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("privilegio","idfuncion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class problemaColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal problemaColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("problema","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the fecha
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation fecha
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("problema","fecha","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idmaquina
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idmaquina
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("problema","idmaquina","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the motivo
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation motivo
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("problema","motivo","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("problema","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class proveedorColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal proveedorColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("proveedor","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the empresa
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation empresa
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("proveedor","empresa","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the contacto
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation contacto
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("proveedor","contacto","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the direccion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation direccion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("proveedor","direccion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the telefono
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation telefono
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("proveedor","telefono","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("proveedor","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class recomendacionColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal recomendacionColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("recomendacion","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idmaquina
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idmaquina
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("recomendacion","idmaquina","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the Propertyrecomendacion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation Propertyrecomendacion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("recomendacion","recomendacion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the tipo
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation tipo
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("recomendacion","tipo","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("recomendacion","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class rolColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal rolColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("rol","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the nombre
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation nombre
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("rol","nombre","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("rol","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class solicitudColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal solicitudColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idusuario
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idusuario
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","idusuario","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the fecha
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation fecha
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","fecha","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the observacion
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation observacion
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","observacion","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the tipo
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation tipo
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","tipo","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idMaquina
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idMaquina
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","idMaquina","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado_solicitud
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado_solicitud
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("solicitud","estado_solicitud","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class sysdiagramsColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal sysdiagramsColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the name
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation name
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","name","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the principal_id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation principal_id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","principal_id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the diagram_id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation diagram_id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","diagram_id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the version
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation version
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","version","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the definition
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation definition
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("sysdiagrams","definition","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}

				/// <summary>
				/// Internal class - do not instantiate directly. See <see cref="JoinPath"/>.
				/// </summary>
				public class UsuarioColumns : DataManagerBase.JoinPathRelation
				{
					/// <summary>
					/// Default Constructor.
					/// </summary>
					/// <remarks>
					/// Do not construct directly
					/// </remarks>
					internal UsuarioColumns(ArrayList relationList, string alias) { RelationList = relationList; OrmAlias = alias; }


					/// <summary>
					/// Apply constraint to the id
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation id
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Usuario","id","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the usuario
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation usuario
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Usuario","usuario","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the password
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation password
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Usuario","password","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the idrol
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation idrol
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Usuario","idrol","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}

					/// <summary>
					/// Apply constraint to the estado
					/// </summary>
					/// <value>
					/// A relationship chain to constrain the criteria with
					/// </value>
					public DataManagerBase.JoinPathRelation estado
					{
						get
						{							
							RelationList.Add(new DataManagerBase.Relation("Usuario","estado","","", this.OrmAlias, this.OrmAlias));
							return this;
						}
					}


				}


		}
	}
}
		

