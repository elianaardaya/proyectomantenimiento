//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace dbMantenimientoBiz
{

		/// <summary>
		///	Holds a collection of aprobacions that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(aprobacion))]
		public abstract class aprobacionCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public aprobacionCollectionOrmTemplate() : base(typeof(aprobacion)){}

			/// <summary>
			/// Gets or sets the <see cref="aprobacion"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public aprobacion this[int index]
			{
				get
				{
					return (aprobacion)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of aprobacions</returns>
			public aprobacionCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of aprobacions</returns>
			public aprobacionCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				aprobacionCollection retCollection = new aprobacionCollection();
				
				foreach( aprobacion _aprobacion in List)
				{
					if ( Match(comparer,_aprobacion[property] , searchValue) ) 
						retCollection.Add( _aprobacion );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public aprobacionCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public aprobacionCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (aprobacionCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public aprobacion FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public aprobacion FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( aprobacion _aprobacion in List)
				{
					if ( Match(comparer,_aprobacion[property] , searchValue) ) 
						return _aprobacion;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a aprobacion to the collection.
			/// </summary>
			/// <param name="newaprobacion">Adds a aprobacion to the collection</param>
			public int Add( aprobacion newaprobacion)
			{
				return List.Add( newaprobacion );
			}

		/// <summary>
		/// Find a aprobacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a aprobacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( aprobacion _aprobacion in List)
			{
				if ( Match(comparer,_aprobacion.id , searchValue) ) 
					return _aprobacion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a aprobacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a aprobacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a aprobacion by the property idMantenimiento.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidMantenimiento( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidMantenimiento( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a aprobacion by the property idMantenimiento.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidMantenimiento( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( aprobacion _aprobacion in List)
			{
				if ( Match(comparer,_aprobacion.idMantenimiento , searchValue) ) 
					return _aprobacion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a aprobacion by the property idMantenimiento.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidMantenimiento( string searchValue )
		{
			return FindByidMantenimiento( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a aprobacion by the property idMantenimiento.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidMantenimiento( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidMantenimiento( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a aprobacion by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidusuario( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a aprobacion by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidusuario( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( aprobacion _aprobacion in List)
			{
				if ( Match(comparer,_aprobacion.idusuario , searchValue) ) 
					return _aprobacion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a aprobacion by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidusuario( string searchValue )
		{
			return FindByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a aprobacion by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An aprobacion if found, or null</returns>
		public	aprobacion	FindByidusuario( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			aprobacionCollection retCollection = new aprobacionCollection();

			foreach( aprobacion _aprobacion in List)
			{
				if ( Match(comparer,_aprobacion.id , searchValue) ) 
					retCollection.Add( _aprobacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idMantenimiento.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidMantenimiento( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidMantenimiento( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idMantenimiento.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidMantenimiento( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			aprobacionCollection retCollection = new aprobacionCollection();

			foreach( aprobacion _aprobacion in List)
			{
				if ( Match(comparer,_aprobacion.idMantenimiento , searchValue) ) 
					retCollection.Add( _aprobacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idMantenimiento.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidMantenimiento( string searchValue )
		{
			return FilterByidMantenimiento( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idMantenimiento.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidMantenimiento( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidMantenimiento( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidusuario( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidusuario( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			aprobacionCollection retCollection = new aprobacionCollection();

			foreach( aprobacion _aprobacion in List)
			{
				if ( Match(comparer,_aprobacion.idusuario , searchValue) ) 
					retCollection.Add( _aprobacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidusuario( string searchValue )
		{
			return FilterByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A aprobacionCollection of aprobacions</returns>
		public	aprobacionCollection	FilterByidusuario( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a aprobacion by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	aprobacionCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (aprobacionCollection)this;
		}

		/// <summary>
		/// Sorts a aprobacion by the property idMantenimiento.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	aprobacionCollection	SortByidMantenimiento ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idMantenimiento"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (aprobacionCollection)this;
		}

		/// <summary>
		/// Sorts a aprobacion by the property idusuario.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	aprobacionCollection	SortByidusuario ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idusuario"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (aprobacionCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of componentes that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(componente))]
		public abstract class componenteCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public componenteCollectionOrmTemplate() : base(typeof(componente)){}

			/// <summary>
			/// Gets or sets the <see cref="componente"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public componente this[int index]
			{
				get
				{
					return (componente)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of componentes</returns>
			public componenteCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of componentes</returns>
			public componenteCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				componenteCollection retCollection = new componenteCollection();
				
				foreach( componente _componente in List)
				{
					if ( Match(comparer,_componente[property] , searchValue) ) 
						retCollection.Add( _componente );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public componenteCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public componenteCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (componenteCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public componente FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public componente FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( componente _componente in List)
				{
					if ( Match(comparer,_componente[property] , searchValue) ) 
						return _componente;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a componente to the collection.
			/// </summary>
			/// <param name="newcomponente">Adds a componente to the collection</param>
			public int Add( componente newcomponente)
			{
				return List.Add( newcomponente );
			}

		/// <summary>
		/// Find a componente by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByid( System.String searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByid( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.id , searchValue) ) 
					return _componente;
			}
			
			return null;
		}
		/// <summary>
		/// Find a componente by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.nombre , searchValue) ) 
					return _componente;
			}
			
			return null;
		}
		/// <summary>
		/// Find a componente by the property marca.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindBymarca( System.String searchValue )
		{
			return FindBymarca( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property marca.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindBymarca( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.marca , searchValue) ) 
					return _componente;
			}
			
			return null;
		}
		/// <summary>
		/// Find a componente by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidproveedor( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.idproveedor , searchValue) ) 
					return _componente;
			}
			
			return null;
		}


		/// <summary>
		/// Find a componente by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByidproveedor( string searchValue )
		{
			return FindByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByidproveedor( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a componente by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.estado , searchValue) ) 
					return _componente;
			}
			
			return null;
		}


		/// <summary>
		/// Find a componente by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a componente by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An componente if found, or null</returns>
		public	componente	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByid( System.String searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByid( System.String searchValue, OrmLib.CompareType comparer )
		{
			componenteCollection retCollection = new componenteCollection();

			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.id , searchValue) ) 
					retCollection.Add( _componente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			componenteCollection retCollection = new componenteCollection();

			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.nombre , searchValue) ) 
					retCollection.Add( _componente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property marca.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterBymarca( System.String searchValue )
		{
			return FilterBymarca( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property marca.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterBymarca( System.String searchValue, OrmLib.CompareType comparer )
		{
			componenteCollection retCollection = new componenteCollection();

			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.marca , searchValue) ) 
					retCollection.Add( _componente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidproveedor( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			componenteCollection retCollection = new componenteCollection();

			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.idproveedor , searchValue) ) 
					retCollection.Add( _componente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByidproveedor( string searchValue )
		{
			return FilterByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByidproveedor( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			componenteCollection retCollection = new componenteCollection();

			foreach( componente _componente in List)
			{
				if ( Match(comparer,_componente.estado , searchValue) ) 
					retCollection.Add( _componente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A componenteCollection of componentes</returns>
		public	componenteCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a componente by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	componenteCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (componenteCollection)this;
		}

		/// <summary>
		/// Sorts a componente by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	componenteCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (componenteCollection)this;
		}

		/// <summary>
		/// Sorts a componente by the property marca.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	componenteCollection	SortBymarca ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("marca"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (componenteCollection)this;
		}

		/// <summary>
		/// Sorts a componente by the property idproveedor.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	componenteCollection	SortByidproveedor ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idproveedor"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (componenteCollection)this;
		}

		/// <summary>
		/// Sorts a componente by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	componenteCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (componenteCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of detalle_reparos that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(detalle_reparo))]
		public abstract class detalle_reparoCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public detalle_reparoCollectionOrmTemplate() : base(typeof(detalle_reparo)){}

			/// <summary>
			/// Gets or sets the <see cref="detalle_reparo"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public detalle_reparo this[int index]
			{
				get
				{
					return (detalle_reparo)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of detalle_reparos</returns>
			public detalle_reparoCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of detalle_reparos</returns>
			public detalle_reparoCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				detalle_reparoCollection retCollection = new detalle_reparoCollection();
				
				foreach( detalle_reparo _detalle_reparo in List)
				{
					if ( Match(comparer,_detalle_reparo[property] , searchValue) ) 
						retCollection.Add( _detalle_reparo );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public detalle_reparoCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public detalle_reparoCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (detalle_reparoCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public detalle_reparo FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public detalle_reparo FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( detalle_reparo _detalle_reparo in List)
				{
					if ( Match(comparer,_detalle_reparo[property] , searchValue) ) 
						return _detalle_reparo;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a detalle_reparo to the collection.
			/// </summary>
			/// <param name="newdetalle_reparo">Adds a detalle_reparo to the collection</param>
			public int Add( detalle_reparo newdetalle_reparo)
			{
				return List.Add( newdetalle_reparo );
			}

		/// <summary>
		/// Find a detalle_reparo by the property idmaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidmaquina( System.String searchValue )
		{
			return FindByidmaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property idmaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidmaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.idmaquina , searchValue) ) 
					return _detalle_reparo;
			}
			
			return null;
		}
		/// <summary>
		/// Find a detalle_reparo by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByfecha( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FindByfecha( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByfecha( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.fecha , searchValue) ) 
					return _detalle_reparo;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalle_reparo by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByfecha( string searchValue )
		{
			return FindByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByfecha( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalle_reparo by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.id , searchValue) ) 
					return _detalle_reparo;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalle_reparo by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalle_reparo by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidusuario( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidusuario( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.idusuario , searchValue) ) 
					return _detalle_reparo;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalle_reparo by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidusuario( string searchValue )
		{
			return FindByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidusuario( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalle_reparo by the property idproblema.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidproblema( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidproblema( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property idproblema.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidproblema( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.idproblema , searchValue) ) 
					return _detalle_reparo;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalle_reparo by the property idproblema.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidproblema( string searchValue )
		{
			return FindByidproblema( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property idproblema.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByidproblema( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidproblema( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalle_reparo by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.estado , searchValue) ) 
					return _detalle_reparo;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalle_reparo by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalle_reparo by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalle_reparo if found, or null</returns>
		public	detalle_reparo	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idmaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidmaquina( System.String searchValue )
		{
			return FilterByidmaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidmaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			detalle_reparoCollection retCollection = new detalle_reparoCollection();

			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.idmaquina , searchValue) ) 
					retCollection.Add( _detalle_reparo );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByfecha( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FilterByfecha( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByfecha( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			detalle_reparoCollection retCollection = new detalle_reparoCollection();

			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.fecha , searchValue) ) 
					retCollection.Add( _detalle_reparo );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByfecha( string searchValue )
		{
			return FilterByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByfecha( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			detalle_reparoCollection retCollection = new detalle_reparoCollection();

			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.id , searchValue) ) 
					retCollection.Add( _detalle_reparo );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidusuario( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidusuario( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			detalle_reparoCollection retCollection = new detalle_reparoCollection();

			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.idusuario , searchValue) ) 
					retCollection.Add( _detalle_reparo );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidusuario( string searchValue )
		{
			return FilterByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidusuario( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idproblema.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidproblema( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidproblema( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idproblema.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidproblema( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			detalle_reparoCollection retCollection = new detalle_reparoCollection();

			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.idproblema , searchValue) ) 
					retCollection.Add( _detalle_reparo );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idproblema.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidproblema( string searchValue )
		{
			return FilterByidproblema( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idproblema.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByidproblema( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidproblema( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			detalle_reparoCollection retCollection = new detalle_reparoCollection();

			foreach( detalle_reparo _detalle_reparo in List)
			{
				if ( Match(comparer,_detalle_reparo.estado , searchValue) ) 
					retCollection.Add( _detalle_reparo );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalle_reparoCollection of detalle_reparos</returns>
		public	detalle_reparoCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a detalle_reparo by the property idmaquina.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalle_reparoCollection	SortByidmaquina ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idmaquina"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalle_reparoCollection)this;
		}

		/// <summary>
		/// Sorts a detalle_reparo by the property fecha.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalle_reparoCollection	SortByfecha ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("fecha"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalle_reparoCollection)this;
		}

		/// <summary>
		/// Sorts a detalle_reparo by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalle_reparoCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalle_reparoCollection)this;
		}

		/// <summary>
		/// Sorts a detalle_reparo by the property idusuario.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalle_reparoCollection	SortByidusuario ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idusuario"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalle_reparoCollection)this;
		}

		/// <summary>
		/// Sorts a detalle_reparo by the property idproblema.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalle_reparoCollection	SortByidproblema ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idproblema"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalle_reparoCollection)this;
		}

		/// <summary>
		/// Sorts a detalle_reparo by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalle_reparoCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalle_reparoCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of detalleComponentes that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(detalleComponente))]
		public abstract class detalleComponenteCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public detalleComponenteCollectionOrmTemplate() : base(typeof(detalleComponente)){}

			/// <summary>
			/// Gets or sets the <see cref="detalleComponente"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public detalleComponente this[int index]
			{
				get
				{
					return (detalleComponente)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of detalleComponentes</returns>
			public detalleComponenteCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of detalleComponentes</returns>
			public detalleComponenteCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				detalleComponenteCollection retCollection = new detalleComponenteCollection();
				
				foreach( detalleComponente _detalleComponente in List)
				{
					if ( Match(comparer,_detalleComponente[property] , searchValue) ) 
						retCollection.Add( _detalleComponente );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public detalleComponenteCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public detalleComponenteCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (detalleComponenteCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public detalleComponente FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public detalleComponente FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( detalleComponente _detalleComponente in List)
				{
					if ( Match(comparer,_detalleComponente[property] , searchValue) ) 
						return _detalleComponente;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a detalleComponente to the collection.
			/// </summary>
			/// <param name="newdetalleComponente">Adds a detalleComponente to the collection</param>
			public int Add( detalleComponente newdetalleComponente)
			{
				return List.Add( newdetalleComponente );
			}

		/// <summary>
		/// Find a detalleComponente by the property id_componente.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid_componente( System.String searchValue )
		{
			return FindByid_componente( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property id_componente.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid_componente( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.id_componente , searchValue) ) 
					return _detalleComponente;
			}
			
			return null;
		}
		/// <summary>
		/// Find a detalleComponente by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByid_reparo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.id_reparo , searchValue) ) 
					return _detalleComponente;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalleComponente by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid_reparo( string searchValue )
		{
			return FindByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid_reparo( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalleComponente by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBycantidad( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindBycantidad( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBycantidad( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.cantidad , searchValue) ) 
					return _detalleComponente;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalleComponente by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBycantidad( string searchValue )
		{
			return FindBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBycantidad( string searchValue, OrmLib.CompareType comparer )
		{
			return FindBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalleComponente by the property monto.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBymonto( System.Data.SqlTypes.SqlDouble searchValue )
		{
			return FindBymonto( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property monto.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBymonto( System.Data.SqlTypes.SqlDouble searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.monto , searchValue) ) 
					return _detalleComponente;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalleComponente by the property monto.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBymonto( string searchValue )
		{
			return FindBymonto( System.Data.SqlTypes.SqlDouble.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property monto.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindBymonto( string searchValue, OrmLib.CompareType comparer )
		{
			return FindBymonto( System.Data.SqlTypes.SqlDouble.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a detalleComponente by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.id , searchValue) ) 
					return _detalleComponente;
			}
			
			return null;
		}


		/// <summary>
		/// Find a detalleComponente by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a detalleComponente by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An detalleComponente if found, or null</returns>
		public	detalleComponente	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id_componente.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid_componente( System.String searchValue )
		{
			return FilterByid_componente( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id_componente.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid_componente( System.String searchValue, OrmLib.CompareType comparer )
		{
			detalleComponenteCollection retCollection = new detalleComponenteCollection();

			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.id_componente , searchValue) ) 
					retCollection.Add( _detalleComponente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByid_reparo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			detalleComponenteCollection retCollection = new detalleComponenteCollection();

			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.id_reparo , searchValue) ) 
					retCollection.Add( _detalleComponente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid_reparo( string searchValue )
		{
			return FilterByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid_reparo( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBycantidad( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterBycantidad( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBycantidad( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			detalleComponenteCollection retCollection = new detalleComponenteCollection();

			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.cantidad , searchValue) ) 
					retCollection.Add( _detalleComponente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBycantidad( string searchValue )
		{
			return FilterBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBycantidad( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property monto.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBymonto( System.Data.SqlTypes.SqlDouble searchValue )
		{
			return FilterBymonto( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property monto.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBymonto( System.Data.SqlTypes.SqlDouble searchValue, OrmLib.CompareType comparer )
		{
			detalleComponenteCollection retCollection = new detalleComponenteCollection();

			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.monto , searchValue) ) 
					retCollection.Add( _detalleComponente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property monto.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBymonto( string searchValue )
		{
			return FilterBymonto( System.Data.SqlTypes.SqlDouble.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property monto.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterBymonto( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterBymonto( System.Data.SqlTypes.SqlDouble.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			detalleComponenteCollection retCollection = new detalleComponenteCollection();

			foreach( detalleComponente _detalleComponente in List)
			{
				if ( Match(comparer,_detalleComponente.id , searchValue) ) 
					retCollection.Add( _detalleComponente );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A detalleComponenteCollection of detalleComponentes</returns>
		public	detalleComponenteCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a detalleComponente by the property id_componente.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalleComponenteCollection	SortByid_componente ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id_componente"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalleComponenteCollection)this;
		}

		/// <summary>
		/// Sorts a detalleComponente by the property id_reparo.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalleComponenteCollection	SortByid_reparo ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id_reparo"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalleComponenteCollection)this;
		}

		/// <summary>
		/// Sorts a detalleComponente by the property cantidad.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalleComponenteCollection	SortBycantidad ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("cantidad"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalleComponenteCollection)this;
		}

		/// <summary>
		/// Sorts a detalleComponente by the property monto.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalleComponenteCollection	SortBymonto ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("monto"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalleComponenteCollection)this;
		}

		/// <summary>
		/// Sorts a detalleComponente by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	detalleComponenteCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (detalleComponenteCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of empresas that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(empresa))]
		public abstract class empresaCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public empresaCollectionOrmTemplate() : base(typeof(empresa)){}

			/// <summary>
			/// Gets or sets the <see cref="empresa"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public empresa this[int index]
			{
				get
				{
					return (empresa)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of empresas</returns>
			public empresaCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of empresas</returns>
			public empresaCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				empresaCollection retCollection = new empresaCollection();
				
				foreach( empresa _empresa in List)
				{
					if ( Match(comparer,_empresa[property] , searchValue) ) 
						retCollection.Add( _empresa );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public empresaCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public empresaCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (empresaCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public empresa FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public empresa FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( empresa _empresa in List)
				{
					if ( Match(comparer,_empresa[property] , searchValue) ) 
						return _empresa;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a empresa to the collection.
			/// </summary>
			/// <param name="newempresa">Adds a empresa to the collection</param>
			public int Add( empresa newempresa)
			{
				return List.Add( newempresa );
			}

		/// <summary>
		/// Find a empresa by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.id , searchValue) ) 
					return _empresa;
			}
			
			return null;
		}


		/// <summary>
		/// Find a empresa by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a empresa by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.nombre , searchValue) ) 
					return _empresa;
			}
			
			return null;
		}
		/// <summary>
		/// Find a empresa by the property rubro.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByrubro( System.String searchValue )
		{
			return FindByrubro( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property rubro.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByrubro( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.rubro , searchValue) ) 
					return _empresa;
			}
			
			return null;
		}
		/// <summary>
		/// Find a empresa by the property direccion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindBydireccion( System.String searchValue )
		{
			return FindBydireccion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property direccion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindBydireccion( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.direccion , searchValue) ) 
					return _empresa;
			}
			
			return null;
		}
		/// <summary>
		/// Find a empresa by the property telefono.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindBytelefono( System.String searchValue )
		{
			return FindBytelefono( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property telefono.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindBytelefono( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.telefono , searchValue) ) 
					return _empresa;
			}
			
			return null;
		}
		/// <summary>
		/// Find a empresa by the property imagen.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByimagen( System.Data.SqlTypes.SqlBinary searchValue )
		{
			return FindByimagen( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a empresa by the property imagen.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An empresa if found, or null</returns>
		public	empresa	FindByimagen( System.Data.SqlTypes.SqlBinary searchValue, OrmLib.CompareType comparer )
		{
			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.imagen , searchValue) ) 
					return _empresa;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			empresaCollection retCollection = new empresaCollection();

			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.id , searchValue) ) 
					retCollection.Add( _empresa );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			empresaCollection retCollection = new empresaCollection();

			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.nombre , searchValue) ) 
					retCollection.Add( _empresa );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property rubro.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByrubro( System.String searchValue )
		{
			return FilterByrubro( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property rubro.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByrubro( System.String searchValue, OrmLib.CompareType comparer )
		{
			empresaCollection retCollection = new empresaCollection();

			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.rubro , searchValue) ) 
					retCollection.Add( _empresa );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property direccion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterBydireccion( System.String searchValue )
		{
			return FilterBydireccion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property direccion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterBydireccion( System.String searchValue, OrmLib.CompareType comparer )
		{
			empresaCollection retCollection = new empresaCollection();

			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.direccion , searchValue) ) 
					retCollection.Add( _empresa );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property telefono.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterBytelefono( System.String searchValue )
		{
			return FilterBytelefono( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property telefono.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterBytelefono( System.String searchValue, OrmLib.CompareType comparer )
		{
			empresaCollection retCollection = new empresaCollection();

			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.telefono , searchValue) ) 
					retCollection.Add( _empresa );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property imagen.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByimagen( System.Data.SqlTypes.SqlBinary searchValue )
		{
			return FilterByimagen( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property imagen.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A empresaCollection of empresas</returns>
		public	empresaCollection	FilterByimagen( System.Data.SqlTypes.SqlBinary searchValue, OrmLib.CompareType comparer )
		{
			empresaCollection retCollection = new empresaCollection();

			foreach( empresa _empresa in List)
			{
				if ( Match(comparer,_empresa.imagen , searchValue) ) 
					retCollection.Add( _empresa );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a empresa by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	empresaCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (empresaCollection)this;
		}

		/// <summary>
		/// Sorts a empresa by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	empresaCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (empresaCollection)this;
		}

		/// <summary>
		/// Sorts a empresa by the property rubro.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	empresaCollection	SortByrubro ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("rubro"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (empresaCollection)this;
		}

		/// <summary>
		/// Sorts a empresa by the property direccion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	empresaCollection	SortBydireccion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("direccion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (empresaCollection)this;
		}

		/// <summary>
		/// Sorts a empresa by the property telefono.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	empresaCollection	SortBytelefono ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("telefono"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (empresaCollection)this;
		}

		/// <summary>
		/// Sorts a empresa by the property imagen.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	empresaCollection	SortByimagen ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("imagen"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (empresaCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of funcions that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(funcion))]
		public abstract class funcionCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public funcionCollectionOrmTemplate() : base(typeof(funcion)){}

			/// <summary>
			/// Gets or sets the <see cref="funcion"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public funcion this[int index]
			{
				get
				{
					return (funcion)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of funcions</returns>
			public funcionCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of funcions</returns>
			public funcionCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				funcionCollection retCollection = new funcionCollection();
				
				foreach( funcion _funcion in List)
				{
					if ( Match(comparer,_funcion[property] , searchValue) ) 
						retCollection.Add( _funcion );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public funcionCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public funcionCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (funcionCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public funcion FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public funcion FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( funcion _funcion in List)
				{
					if ( Match(comparer,_funcion[property] , searchValue) ) 
						return _funcion;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a funcion to the collection.
			/// </summary>
			/// <param name="newfuncion">Adds a funcion to the collection</param>
			public int Add( funcion newfuncion)
			{
				return List.Add( newfuncion );
			}

		/// <summary>
		/// Find a funcion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An funcion if found, or null</returns>
		public	funcion	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a funcion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An funcion if found, or null</returns>
		public	funcion	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( funcion _funcion in List)
			{
				if ( Match(comparer,_funcion.id , searchValue) ) 
					return _funcion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a funcion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An funcion if found, or null</returns>
		public	funcion	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a funcion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An funcion if found, or null</returns>
		public	funcion	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a funcion by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An funcion if found, or null</returns>
		public	funcion	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a funcion by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An funcion if found, or null</returns>
		public	funcion	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( funcion _funcion in List)
			{
				if ( Match(comparer,_funcion.nombre , searchValue) ) 
					return _funcion;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A funcionCollection of funcions</returns>
		public	funcionCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A funcionCollection of funcions</returns>
		public	funcionCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			funcionCollection retCollection = new funcionCollection();

			foreach( funcion _funcion in List)
			{
				if ( Match(comparer,_funcion.id , searchValue) ) 
					retCollection.Add( _funcion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A funcionCollection of funcions</returns>
		public	funcionCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A funcionCollection of funcions</returns>
		public	funcionCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A funcionCollection of funcions</returns>
		public	funcionCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A funcionCollection of funcions</returns>
		public	funcionCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			funcionCollection retCollection = new funcionCollection();

			foreach( funcion _funcion in List)
			{
				if ( Match(comparer,_funcion.nombre , searchValue) ) 
					retCollection.Add( _funcion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a funcion by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	funcionCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (funcionCollection)this;
		}

		/// <summary>
		/// Sorts a funcion by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	funcionCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (funcionCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of inventarios that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(inventario))]
		public abstract class inventarioCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public inventarioCollectionOrmTemplate() : base(typeof(inventario)){}

			/// <summary>
			/// Gets or sets the <see cref="inventario"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public inventario this[int index]
			{
				get
				{
					return (inventario)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of inventarios</returns>
			public inventarioCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of inventarios</returns>
			public inventarioCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				inventarioCollection retCollection = new inventarioCollection();
				
				foreach( inventario _inventario in List)
				{
					if ( Match(comparer,_inventario[property] , searchValue) ) 
						retCollection.Add( _inventario );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public inventarioCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public inventarioCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (inventarioCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public inventario FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public inventario FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( inventario _inventario in List)
				{
					if ( Match(comparer,_inventario[property] , searchValue) ) 
						return _inventario;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a inventario to the collection.
			/// </summary>
			/// <param name="newinventario">Adds a inventario to the collection</param>
			public int Add( inventario newinventario)
			{
				return List.Add( newinventario );
			}

		/// <summary>
		/// Find a inventario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a inventario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( inventario _inventario in List)
			{
				if ( Match(comparer,_inventario.id , searchValue) ) 
					return _inventario;
			}
			
			return null;
		}


		/// <summary>
		/// Find a inventario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a inventario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a inventario by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidmaterial( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a inventario by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( inventario _inventario in List)
			{
				if ( Match(comparer,_inventario.idmaterial , searchValue) ) 
					return _inventario;
			}
			
			return null;
		}


		/// <summary>
		/// Find a inventario by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByidmaterial( string searchValue )
		{
			return FindByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a inventario by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindByidmaterial( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a inventario by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindBycantidad( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindBycantidad( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a inventario by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindBycantidad( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( inventario _inventario in List)
			{
				if ( Match(comparer,_inventario.cantidad , searchValue) ) 
					return _inventario;
			}
			
			return null;
		}


		/// <summary>
		/// Find a inventario by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindBycantidad( string searchValue )
		{
			return FindBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a inventario by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An inventario if found, or null</returns>
		public	inventario	FindBycantidad( string searchValue, OrmLib.CompareType comparer )
		{
			return FindBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			inventarioCollection retCollection = new inventarioCollection();

			foreach( inventario _inventario in List)
			{
				if ( Match(comparer,_inventario.id , searchValue) ) 
					retCollection.Add( _inventario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidmaterial( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			inventarioCollection retCollection = new inventarioCollection();

			foreach( inventario _inventario in List)
			{
				if ( Match(comparer,_inventario.idmaterial , searchValue) ) 
					retCollection.Add( _inventario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByidmaterial( string searchValue )
		{
			return FilterByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterByidmaterial( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterBycantidad( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterBycantidad( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterBycantidad( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			inventarioCollection retCollection = new inventarioCollection();

			foreach( inventario _inventario in List)
			{
				if ( Match(comparer,_inventario.cantidad , searchValue) ) 
					retCollection.Add( _inventario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterBycantidad( string searchValue )
		{
			return FilterBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A inventarioCollection of inventarios</returns>
		public	inventarioCollection	FilterBycantidad( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a inventario by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	inventarioCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (inventarioCollection)this;
		}

		/// <summary>
		/// Sorts a inventario by the property idmaterial.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	inventarioCollection	SortByidmaterial ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idmaterial"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (inventarioCollection)this;
		}

		/// <summary>
		/// Sorts a inventario by the property cantidad.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	inventarioCollection	SortBycantidad ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("cantidad"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (inventarioCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of linea_produccions that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(linea_produccion))]
		public abstract class linea_produccionCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public linea_produccionCollectionOrmTemplate() : base(typeof(linea_produccion)){}

			/// <summary>
			/// Gets or sets the <see cref="linea_produccion"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public linea_produccion this[int index]
			{
				get
				{
					return (linea_produccion)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of linea_produccions</returns>
			public linea_produccionCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of linea_produccions</returns>
			public linea_produccionCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				linea_produccionCollection retCollection = new linea_produccionCollection();
				
				foreach( linea_produccion _linea_produccion in List)
				{
					if ( Match(comparer,_linea_produccion[property] , searchValue) ) 
						retCollection.Add( _linea_produccion );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public linea_produccionCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public linea_produccionCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (linea_produccionCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public linea_produccion FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public linea_produccion FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( linea_produccion _linea_produccion in List)
				{
					if ( Match(comparer,_linea_produccion[property] , searchValue) ) 
						return _linea_produccion;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a linea_produccion to the collection.
			/// </summary>
			/// <param name="newlinea_produccion">Adds a linea_produccion to the collection</param>
			public int Add( linea_produccion newlinea_produccion)
			{
				return List.Add( newlinea_produccion );
			}

		/// <summary>
		/// Find a linea_produccion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a linea_produccion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.id , searchValue) ) 
					return _linea_produccion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a linea_produccion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a linea_produccion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a linea_produccion by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a linea_produccion by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.nombre , searchValue) ) 
					return _linea_produccion;
			}
			
			return null;
		}
		/// <summary>
		/// Find a linea_produccion by the property descripcion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindBydescripcion( System.String searchValue )
		{
			return FindBydescripcion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a linea_produccion by the property descripcion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindBydescripcion( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.descripcion , searchValue) ) 
					return _linea_produccion;
			}
			
			return null;
		}
		/// <summary>
		/// Find a linea_produccion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a linea_produccion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.estado , searchValue) ) 
					return _linea_produccion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a linea_produccion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a linea_produccion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An linea_produccion if found, or null</returns>
		public	linea_produccion	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			linea_produccionCollection retCollection = new linea_produccionCollection();

			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.id , searchValue) ) 
					retCollection.Add( _linea_produccion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			linea_produccionCollection retCollection = new linea_produccionCollection();

			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.nombre , searchValue) ) 
					retCollection.Add( _linea_produccion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property descripcion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterBydescripcion( System.String searchValue )
		{
			return FilterBydescripcion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property descripcion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterBydescripcion( System.String searchValue, OrmLib.CompareType comparer )
		{
			linea_produccionCollection retCollection = new linea_produccionCollection();

			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.descripcion , searchValue) ) 
					retCollection.Add( _linea_produccion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			linea_produccionCollection retCollection = new linea_produccionCollection();

			foreach( linea_produccion _linea_produccion in List)
			{
				if ( Match(comparer,_linea_produccion.estado , searchValue) ) 
					retCollection.Add( _linea_produccion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A linea_produccionCollection of linea_produccions</returns>
		public	linea_produccionCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a linea_produccion by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	linea_produccionCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (linea_produccionCollection)this;
		}

		/// <summary>
		/// Sorts a linea_produccion by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	linea_produccionCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (linea_produccionCollection)this;
		}

		/// <summary>
		/// Sorts a linea_produccion by the property descripcion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	linea_produccionCollection	SortBydescripcion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("descripcion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (linea_produccionCollection)this;
		}

		/// <summary>
		/// Sorts a linea_produccion by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	linea_produccionCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (linea_produccionCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of maquinas that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(maquina))]
		public abstract class maquinaCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public maquinaCollectionOrmTemplate() : base(typeof(maquina)){}

			/// <summary>
			/// Gets or sets the <see cref="maquina"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public maquina this[int index]
			{
				get
				{
					return (maquina)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of maquinas</returns>
			public maquinaCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of maquinas</returns>
			public maquinaCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				maquinaCollection retCollection = new maquinaCollection();
				
				foreach( maquina _maquina in List)
				{
					if ( Match(comparer,_maquina[property] , searchValue) ) 
						retCollection.Add( _maquina );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public maquinaCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public maquinaCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (maquinaCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public maquina FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public maquina FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( maquina _maquina in List)
				{
					if ( Match(comparer,_maquina[property] , searchValue) ) 
						return _maquina;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a maquina to the collection.
			/// </summary>
			/// <param name="newmaquina">Adds a maquina to the collection</param>
			public int Add( maquina newmaquina)
			{
				return List.Add( newmaquina );
			}

		/// <summary>
		/// Find a maquina by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByid( System.String searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByid( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.id , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.nombre , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property marca.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindBymarca( System.String searchValue )
		{
			return FindBymarca( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property marca.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindBymarca( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.marca , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property anho.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByanho( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByanho( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property anho.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByanho( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.anho , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}


		/// <summary>
		/// Find a maquina by the property anho.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByanho( string searchValue )
		{
			return FindByanho( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property anho.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByanho( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByanho( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a maquina by the property industria.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByindustria( System.String searchValue )
		{
			return FindByindustria( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property industria.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByindustria( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.industria , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property funcion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByfuncion( System.String searchValue )
		{
			return FindByfuncion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property funcion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByfuncion( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.funcion , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property caracteristicas.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindBycaracteristicas( System.String searchValue )
		{
			return FindBycaracteristicas( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property caracteristicas.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindBycaracteristicas( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.caracteristicas , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property idlinea.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByidlinea( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidlinea( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property idlinea.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByidlinea( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.idlinea , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}


		/// <summary>
		/// Find a maquina by the property idlinea.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByidlinea( string searchValue )
		{
			return FindByidlinea( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property idlinea.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByidlinea( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidlinea( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a maquina by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByestado( System.String searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByestado( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.estado , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}
		/// <summary>
		/// Find a maquina by the property estado2.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByestado2( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado2( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property estado2.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByestado2( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.estado2 , searchValue) ) 
					return _maquina;
			}
			
			return null;
		}


		/// <summary>
		/// Find a maquina by the property estado2.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByestado2( string searchValue )
		{
			return FindByestado2( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a maquina by the property estado2.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An maquina if found, or null</returns>
		public	maquina	FindByestado2( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado2( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByid( System.String searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByid( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.id , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.nombre , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property marca.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterBymarca( System.String searchValue )
		{
			return FilterBymarca( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property marca.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterBymarca( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.marca , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property anho.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByanho( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByanho( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property anho.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByanho( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.anho , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property anho.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByanho( string searchValue )
		{
			return FilterByanho( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property anho.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByanho( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByanho( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property industria.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByindustria( System.String searchValue )
		{
			return FilterByindustria( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property industria.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByindustria( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.industria , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property funcion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByfuncion( System.String searchValue )
		{
			return FilterByfuncion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property funcion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByfuncion( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.funcion , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property caracteristicas.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterBycaracteristicas( System.String searchValue )
		{
			return FilterBycaracteristicas( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property caracteristicas.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterBycaracteristicas( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.caracteristicas , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property idlinea.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByidlinea( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidlinea( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idlinea.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByidlinea( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.idlinea , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idlinea.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByidlinea( string searchValue )
		{
			return FilterByidlinea( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idlinea.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByidlinea( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidlinea( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByestado( System.String searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByestado( System.String searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.estado , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado2.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByestado2( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado2( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado2.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByestado2( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			maquinaCollection retCollection = new maquinaCollection();

			foreach( maquina _maquina in List)
			{
				if ( Match(comparer,_maquina.estado2 , searchValue) ) 
					retCollection.Add( _maquina );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado2.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByestado2( string searchValue )
		{
			return FilterByestado2( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado2.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A maquinaCollection of maquinas</returns>
		public	maquinaCollection	FilterByestado2( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado2( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a maquina by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property marca.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortBymarca ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("marca"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property anho.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByanho ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("anho"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property industria.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByindustria ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("industria"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property funcion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByfuncion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("funcion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property caracteristicas.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortBycaracteristicas ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("caracteristicas"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property idlinea.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByidlinea ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idlinea"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}

		/// <summary>
		/// Sorts a maquina by the property estado2.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	maquinaCollection	SortByestado2 ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado2"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (maquinaCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of material_herramientas that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(material_herramienta))]
		public abstract class material_herramientaCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public material_herramientaCollectionOrmTemplate() : base(typeof(material_herramienta)){}

			/// <summary>
			/// Gets or sets the <see cref="material_herramienta"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public material_herramienta this[int index]
			{
				get
				{
					return (material_herramienta)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of material_herramientas</returns>
			public material_herramientaCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of material_herramientas</returns>
			public material_herramientaCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				material_herramientaCollection retCollection = new material_herramientaCollection();
				
				foreach( material_herramienta _material_herramienta in List)
				{
					if ( Match(comparer,_material_herramienta[property] , searchValue) ) 
						retCollection.Add( _material_herramienta );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public material_herramientaCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public material_herramientaCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (material_herramientaCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public material_herramienta FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public material_herramienta FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( material_herramienta _material_herramienta in List)
				{
					if ( Match(comparer,_material_herramienta[property] , searchValue) ) 
						return _material_herramienta;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a material_herramienta to the collection.
			/// </summary>
			/// <param name="newmaterial_herramienta">Adds a material_herramienta to the collection</param>
			public int Add( material_herramienta newmaterial_herramienta)
			{
				return List.Add( newmaterial_herramienta );
			}

		/// <summary>
		/// Find a material_herramienta by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.id , searchValue) ) 
					return _material_herramienta;
			}
			
			return null;
		}


		/// <summary>
		/// Find a material_herramienta by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a material_herramienta by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.nombre , searchValue) ) 
					return _material_herramienta;
			}
			
			return null;
		}
		/// <summary>
		/// Find a material_herramienta by the property marca.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindBymarca( System.String searchValue )
		{
			return FindBymarca( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property marca.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindBymarca( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.marca , searchValue) ) 
					return _material_herramienta;
			}
			
			return null;
		}
		/// <summary>
		/// Find a material_herramienta by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidproveedor( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.idproveedor , searchValue) ) 
					return _material_herramienta;
			}
			
			return null;
		}


		/// <summary>
		/// Find a material_herramienta by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByidproveedor( string searchValue )
		{
			return FindByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property idproveedor.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByidproveedor( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a material_herramienta by the property precio.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByprecio( System.Data.SqlTypes.SqlDouble searchValue )
		{
			return FindByprecio( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property precio.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByprecio( System.Data.SqlTypes.SqlDouble searchValue, OrmLib.CompareType comparer )
		{
			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.precio , searchValue) ) 
					return _material_herramienta;
			}
			
			return null;
		}


		/// <summary>
		/// Find a material_herramienta by the property precio.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByprecio( string searchValue )
		{
			return FindByprecio( System.Data.SqlTypes.SqlDouble.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property precio.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByprecio( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByprecio( System.Data.SqlTypes.SqlDouble.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a material_herramienta by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.estado , searchValue) ) 
					return _material_herramienta;
			}
			
			return null;
		}


		/// <summary>
		/// Find a material_herramienta by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a material_herramienta by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An material_herramienta if found, or null</returns>
		public	material_herramienta	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			material_herramientaCollection retCollection = new material_herramientaCollection();

			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.id , searchValue) ) 
					retCollection.Add( _material_herramienta );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			material_herramientaCollection retCollection = new material_herramientaCollection();

			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.nombre , searchValue) ) 
					retCollection.Add( _material_herramienta );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property marca.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterBymarca( System.String searchValue )
		{
			return FilterBymarca( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property marca.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterBymarca( System.String searchValue, OrmLib.CompareType comparer )
		{
			material_herramientaCollection retCollection = new material_herramientaCollection();

			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.marca , searchValue) ) 
					retCollection.Add( _material_herramienta );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidproveedor( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByidproveedor( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			material_herramientaCollection retCollection = new material_herramientaCollection();

			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.idproveedor , searchValue) ) 
					retCollection.Add( _material_herramienta );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByidproveedor( string searchValue )
		{
			return FilterByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idproveedor.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByidproveedor( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidproveedor( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property precio.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByprecio( System.Data.SqlTypes.SqlDouble searchValue )
		{
			return FilterByprecio( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property precio.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByprecio( System.Data.SqlTypes.SqlDouble searchValue, OrmLib.CompareType comparer )
		{
			material_herramientaCollection retCollection = new material_herramientaCollection();

			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.precio , searchValue) ) 
					retCollection.Add( _material_herramienta );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property precio.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByprecio( string searchValue )
		{
			return FilterByprecio( System.Data.SqlTypes.SqlDouble.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property precio.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByprecio( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByprecio( System.Data.SqlTypes.SqlDouble.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			material_herramientaCollection retCollection = new material_herramientaCollection();

			foreach( material_herramienta _material_herramienta in List)
			{
				if ( Match(comparer,_material_herramienta.estado , searchValue) ) 
					retCollection.Add( _material_herramienta );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A material_herramientaCollection of material_herramientas</returns>
		public	material_herramientaCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a material_herramienta by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	material_herramientaCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (material_herramientaCollection)this;
		}

		/// <summary>
		/// Sorts a material_herramienta by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	material_herramientaCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (material_herramientaCollection)this;
		}

		/// <summary>
		/// Sorts a material_herramienta by the property marca.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	material_herramientaCollection	SortBymarca ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("marca"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (material_herramientaCollection)this;
		}

		/// <summary>
		/// Sorts a material_herramienta by the property idproveedor.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	material_herramientaCollection	SortByidproveedor ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idproveedor"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (material_herramientaCollection)this;
		}

		/// <summary>
		/// Sorts a material_herramienta by the property precio.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	material_herramientaCollection	SortByprecio ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("precio"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (material_herramientaCollection)this;
		}

		/// <summary>
		/// Sorts a material_herramienta by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	material_herramientaCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (material_herramientaCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of materialusados that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(materialusado))]
		public abstract class materialusadoCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public materialusadoCollectionOrmTemplate() : base(typeof(materialusado)){}

			/// <summary>
			/// Gets or sets the <see cref="materialusado"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public materialusado this[int index]
			{
				get
				{
					return (materialusado)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of materialusados</returns>
			public materialusadoCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of materialusados</returns>
			public materialusadoCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				materialusadoCollection retCollection = new materialusadoCollection();
				
				foreach( materialusado _materialusado in List)
				{
					if ( Match(comparer,_materialusado[property] , searchValue) ) 
						retCollection.Add( _materialusado );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public materialusadoCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public materialusadoCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (materialusadoCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public materialusado FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public materialusado FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( materialusado _materialusado in List)
				{
					if ( Match(comparer,_materialusado[property] , searchValue) ) 
						return _materialusado;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a materialusado to the collection.
			/// </summary>
			/// <param name="newmaterialusado">Adds a materialusado to the collection</param>
			public int Add( materialusado newmaterialusado)
			{
				return List.Add( newmaterialusado );
			}

		/// <summary>
		/// Find a materialusado by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.id , searchValue) ) 
					return _materialusado;
			}
			
			return null;
		}


		/// <summary>
		/// Find a materialusado by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a materialusado by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidmaterial( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.idmaterial , searchValue) ) 
					return _materialusado;
			}
			
			return null;
		}


		/// <summary>
		/// Find a materialusado by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByidmaterial( string searchValue )
		{
			return FindByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property idmaterial.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByidmaterial( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a materialusado by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindBycantidad( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindBycantidad( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindBycantidad( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.cantidad , searchValue) ) 
					return _materialusado;
			}
			
			return null;
		}


		/// <summary>
		/// Find a materialusado by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindBycantidad( string searchValue )
		{
			return FindBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property cantidad.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindBycantidad( string searchValue, OrmLib.CompareType comparer )
		{
			return FindBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a materialusado by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByid_reparo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.id_reparo , searchValue) ) 
					return _materialusado;
			}
			
			return null;
		}


		/// <summary>
		/// Find a materialusado by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid_reparo( string searchValue )
		{
			return FindByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a materialusado by the property id_reparo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An materialusado if found, or null</returns>
		public	materialusado	FindByid_reparo( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			materialusadoCollection retCollection = new materialusadoCollection();

			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.id , searchValue) ) 
					retCollection.Add( _materialusado );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidmaterial( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByidmaterial( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			materialusadoCollection retCollection = new materialusadoCollection();

			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.idmaterial , searchValue) ) 
					retCollection.Add( _materialusado );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByidmaterial( string searchValue )
		{
			return FilterByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaterial.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByidmaterial( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidmaterial( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterBycantidad( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterBycantidad( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterBycantidad( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			materialusadoCollection retCollection = new materialusadoCollection();

			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.cantidad , searchValue) ) 
					retCollection.Add( _materialusado );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterBycantidad( string searchValue )
		{
			return FilterBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property cantidad.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterBycantidad( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterBycantidad( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByid_reparo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid_reparo( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			materialusadoCollection retCollection = new materialusadoCollection();

			foreach( materialusado _materialusado in List)
			{
				if ( Match(comparer,_materialusado.id_reparo , searchValue) ) 
					retCollection.Add( _materialusado );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid_reparo( string searchValue )
		{
			return FilterByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id_reparo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A materialusadoCollection of materialusados</returns>
		public	materialusadoCollection	FilterByid_reparo( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid_reparo( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a materialusado by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	materialusadoCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (materialusadoCollection)this;
		}

		/// <summary>
		/// Sorts a materialusado by the property idmaterial.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	materialusadoCollection	SortByidmaterial ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idmaterial"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (materialusadoCollection)this;
		}

		/// <summary>
		/// Sorts a materialusado by the property cantidad.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	materialusadoCollection	SortBycantidad ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("cantidad"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (materialusadoCollection)this;
		}

		/// <summary>
		/// Sorts a materialusado by the property id_reparo.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	materialusadoCollection	SortByid_reparo ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id_reparo"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (materialusadoCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of privilegios that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(privilegio))]
		public abstract class privilegioCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public privilegioCollectionOrmTemplate() : base(typeof(privilegio)){}

			/// <summary>
			/// Gets or sets the <see cref="privilegio"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public privilegio this[int index]
			{
				get
				{
					return (privilegio)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of privilegios</returns>
			public privilegioCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of privilegios</returns>
			public privilegioCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				privilegioCollection retCollection = new privilegioCollection();
				
				foreach( privilegio _privilegio in List)
				{
					if ( Match(comparer,_privilegio[property] , searchValue) ) 
						retCollection.Add( _privilegio );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public privilegioCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public privilegioCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (privilegioCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public privilegio FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public privilegio FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( privilegio _privilegio in List)
				{
					if ( Match(comparer,_privilegio[property] , searchValue) ) 
						return _privilegio;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a privilegio to the collection.
			/// </summary>
			/// <param name="newprivilegio">Adds a privilegio to the collection</param>
			public int Add( privilegio newprivilegio)
			{
				return List.Add( newprivilegio );
			}

		/// <summary>
		/// Find a privilegio by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a privilegio by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( privilegio _privilegio in List)
			{
				if ( Match(comparer,_privilegio.id , searchValue) ) 
					return _privilegio;
			}
			
			return null;
		}


		/// <summary>
		/// Find a privilegio by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a privilegio by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a privilegio by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidrol( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidrol( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a privilegio by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidrol( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( privilegio _privilegio in List)
			{
				if ( Match(comparer,_privilegio.idrol , searchValue) ) 
					return _privilegio;
			}
			
			return null;
		}


		/// <summary>
		/// Find a privilegio by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidrol( string searchValue )
		{
			return FindByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a privilegio by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidrol( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a privilegio by the property idfuncion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidfuncion( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidfuncion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a privilegio by the property idfuncion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidfuncion( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( privilegio _privilegio in List)
			{
				if ( Match(comparer,_privilegio.idfuncion , searchValue) ) 
					return _privilegio;
			}
			
			return null;
		}


		/// <summary>
		/// Find a privilegio by the property idfuncion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidfuncion( string searchValue )
		{
			return FindByidfuncion( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a privilegio by the property idfuncion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An privilegio if found, or null</returns>
		public	privilegio	FindByidfuncion( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidfuncion( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			privilegioCollection retCollection = new privilegioCollection();

			foreach( privilegio _privilegio in List)
			{
				if ( Match(comparer,_privilegio.id , searchValue) ) 
					retCollection.Add( _privilegio );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidrol( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidrol( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidrol( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			privilegioCollection retCollection = new privilegioCollection();

			foreach( privilegio _privilegio in List)
			{
				if ( Match(comparer,_privilegio.idrol , searchValue) ) 
					retCollection.Add( _privilegio );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidrol( string searchValue )
		{
			return FilterByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidrol( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idfuncion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidfuncion( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidfuncion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idfuncion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidfuncion( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			privilegioCollection retCollection = new privilegioCollection();

			foreach( privilegio _privilegio in List)
			{
				if ( Match(comparer,_privilegio.idfuncion , searchValue) ) 
					retCollection.Add( _privilegio );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idfuncion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidfuncion( string searchValue )
		{
			return FilterByidfuncion( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idfuncion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A privilegioCollection of privilegios</returns>
		public	privilegioCollection	FilterByidfuncion( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidfuncion( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a privilegio by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	privilegioCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (privilegioCollection)this;
		}

		/// <summary>
		/// Sorts a privilegio by the property idrol.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	privilegioCollection	SortByidrol ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idrol"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (privilegioCollection)this;
		}

		/// <summary>
		/// Sorts a privilegio by the property idfuncion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	privilegioCollection	SortByidfuncion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idfuncion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (privilegioCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of problemas that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(problema))]
		public abstract class problemaCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public problemaCollectionOrmTemplate() : base(typeof(problema)){}

			/// <summary>
			/// Gets or sets the <see cref="problema"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public problema this[int index]
			{
				get
				{
					return (problema)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of problemas</returns>
			public problemaCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of problemas</returns>
			public problemaCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				problemaCollection retCollection = new problemaCollection();
				
				foreach( problema _problema in List)
				{
					if ( Match(comparer,_problema[property] , searchValue) ) 
						retCollection.Add( _problema );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public problemaCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public problemaCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (problemaCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public problema FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public problema FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( problema _problema in List)
				{
					if ( Match(comparer,_problema[property] , searchValue) ) 
						return _problema;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a problema to the collection.
			/// </summary>
			/// <param name="newproblema">Adds a problema to the collection</param>
			public int Add( problema newproblema)
			{
				return List.Add( newproblema );
			}

		/// <summary>
		/// Find a problema by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.id , searchValue) ) 
					return _problema;
			}
			
			return null;
		}


		/// <summary>
		/// Find a problema by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a problema by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByfecha( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FindByfecha( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByfecha( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.fecha , searchValue) ) 
					return _problema;
			}
			
			return null;
		}


		/// <summary>
		/// Find a problema by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByfecha( string searchValue )
		{
			return FindByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByfecha( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a problema by the property idmaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByidmaquina( System.String searchValue )
		{
			return FindByidmaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property idmaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByidmaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.idmaquina , searchValue) ) 
					return _problema;
			}
			
			return null;
		}
		/// <summary>
		/// Find a problema by the property motivo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindBymotivo( System.String searchValue )
		{
			return FindBymotivo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property motivo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindBymotivo( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.motivo , searchValue) ) 
					return _problema;
			}
			
			return null;
		}
		/// <summary>
		/// Find a problema by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.estado , searchValue) ) 
					return _problema;
			}
			
			return null;
		}


		/// <summary>
		/// Find a problema by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a problema by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An problema if found, or null</returns>
		public	problema	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			problemaCollection retCollection = new problemaCollection();

			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.id , searchValue) ) 
					retCollection.Add( _problema );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByfecha( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FilterByfecha( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByfecha( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			problemaCollection retCollection = new problemaCollection();

			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.fecha , searchValue) ) 
					retCollection.Add( _problema );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByfecha( string searchValue )
		{
			return FilterByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByfecha( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idmaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByidmaquina( System.String searchValue )
		{
			return FilterByidmaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByidmaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			problemaCollection retCollection = new problemaCollection();

			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.idmaquina , searchValue) ) 
					retCollection.Add( _problema );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property motivo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterBymotivo( System.String searchValue )
		{
			return FilterBymotivo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property motivo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterBymotivo( System.String searchValue, OrmLib.CompareType comparer )
		{
			problemaCollection retCollection = new problemaCollection();

			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.motivo , searchValue) ) 
					retCollection.Add( _problema );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			problemaCollection retCollection = new problemaCollection();

			foreach( problema _problema in List)
			{
				if ( Match(comparer,_problema.estado , searchValue) ) 
					retCollection.Add( _problema );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A problemaCollection of problemas</returns>
		public	problemaCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a problema by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	problemaCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (problemaCollection)this;
		}

		/// <summary>
		/// Sorts a problema by the property fecha.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	problemaCollection	SortByfecha ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("fecha"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (problemaCollection)this;
		}

		/// <summary>
		/// Sorts a problema by the property idmaquina.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	problemaCollection	SortByidmaquina ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idmaquina"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (problemaCollection)this;
		}

		/// <summary>
		/// Sorts a problema by the property motivo.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	problemaCollection	SortBymotivo ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("motivo"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (problemaCollection)this;
		}

		/// <summary>
		/// Sorts a problema by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	problemaCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (problemaCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of proveedors that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(proveedor))]
		public abstract class proveedorCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public proveedorCollectionOrmTemplate() : base(typeof(proveedor)){}

			/// <summary>
			/// Gets or sets the <see cref="proveedor"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public proveedor this[int index]
			{
				get
				{
					return (proveedor)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of proveedors</returns>
			public proveedorCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of proveedors</returns>
			public proveedorCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				proveedorCollection retCollection = new proveedorCollection();
				
				foreach( proveedor _proveedor in List)
				{
					if ( Match(comparer,_proveedor[property] , searchValue) ) 
						retCollection.Add( _proveedor );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public proveedorCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public proveedorCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (proveedorCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public proveedor FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public proveedor FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( proveedor _proveedor in List)
				{
					if ( Match(comparer,_proveedor[property] , searchValue) ) 
						return _proveedor;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a proveedor to the collection.
			/// </summary>
			/// <param name="newproveedor">Adds a proveedor to the collection</param>
			public int Add( proveedor newproveedor)
			{
				return List.Add( newproveedor );
			}

		/// <summary>
		/// Find a proveedor by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.id , searchValue) ) 
					return _proveedor;
			}
			
			return null;
		}


		/// <summary>
		/// Find a proveedor by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a proveedor by the property empresa.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByempresa( System.String searchValue )
		{
			return FindByempresa( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property empresa.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByempresa( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.empresa , searchValue) ) 
					return _proveedor;
			}
			
			return null;
		}
		/// <summary>
		/// Find a proveedor by the property contacto.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindBycontacto( System.String searchValue )
		{
			return FindBycontacto( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property contacto.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindBycontacto( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.contacto , searchValue) ) 
					return _proveedor;
			}
			
			return null;
		}
		/// <summary>
		/// Find a proveedor by the property direccion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindBydireccion( System.String searchValue )
		{
			return FindBydireccion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property direccion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindBydireccion( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.direccion , searchValue) ) 
					return _proveedor;
			}
			
			return null;
		}
		/// <summary>
		/// Find a proveedor by the property telefono.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindBytelefono( System.String searchValue )
		{
			return FindBytelefono( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property telefono.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindBytelefono( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.telefono , searchValue) ) 
					return _proveedor;
			}
			
			return null;
		}
		/// <summary>
		/// Find a proveedor by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.estado , searchValue) ) 
					return _proveedor;
			}
			
			return null;
		}


		/// <summary>
		/// Find a proveedor by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a proveedor by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An proveedor if found, or null</returns>
		public	proveedor	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			proveedorCollection retCollection = new proveedorCollection();

			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.id , searchValue) ) 
					retCollection.Add( _proveedor );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property empresa.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByempresa( System.String searchValue )
		{
			return FilterByempresa( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property empresa.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByempresa( System.String searchValue, OrmLib.CompareType comparer )
		{
			proveedorCollection retCollection = new proveedorCollection();

			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.empresa , searchValue) ) 
					retCollection.Add( _proveedor );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property contacto.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterBycontacto( System.String searchValue )
		{
			return FilterBycontacto( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property contacto.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterBycontacto( System.String searchValue, OrmLib.CompareType comparer )
		{
			proveedorCollection retCollection = new proveedorCollection();

			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.contacto , searchValue) ) 
					retCollection.Add( _proveedor );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property direccion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterBydireccion( System.String searchValue )
		{
			return FilterBydireccion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property direccion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterBydireccion( System.String searchValue, OrmLib.CompareType comparer )
		{
			proveedorCollection retCollection = new proveedorCollection();

			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.direccion , searchValue) ) 
					retCollection.Add( _proveedor );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property telefono.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterBytelefono( System.String searchValue )
		{
			return FilterBytelefono( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property telefono.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterBytelefono( System.String searchValue, OrmLib.CompareType comparer )
		{
			proveedorCollection retCollection = new proveedorCollection();

			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.telefono , searchValue) ) 
					retCollection.Add( _proveedor );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			proveedorCollection retCollection = new proveedorCollection();

			foreach( proveedor _proveedor in List)
			{
				if ( Match(comparer,_proveedor.estado , searchValue) ) 
					retCollection.Add( _proveedor );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A proveedorCollection of proveedors</returns>
		public	proveedorCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a proveedor by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	proveedorCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (proveedorCollection)this;
		}

		/// <summary>
		/// Sorts a proveedor by the property empresa.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	proveedorCollection	SortByempresa ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("empresa"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (proveedorCollection)this;
		}

		/// <summary>
		/// Sorts a proveedor by the property contacto.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	proveedorCollection	SortBycontacto ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("contacto"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (proveedorCollection)this;
		}

		/// <summary>
		/// Sorts a proveedor by the property direccion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	proveedorCollection	SortBydireccion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("direccion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (proveedorCollection)this;
		}

		/// <summary>
		/// Sorts a proveedor by the property telefono.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	proveedorCollection	SortBytelefono ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("telefono"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (proveedorCollection)this;
		}

		/// <summary>
		/// Sorts a proveedor by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	proveedorCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (proveedorCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of recomendacions that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(recomendacion))]
		public abstract class recomendacionCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public recomendacionCollectionOrmTemplate() : base(typeof(recomendacion)){}

			/// <summary>
			/// Gets or sets the <see cref="recomendacion"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public recomendacion this[int index]
			{
				get
				{
					return (recomendacion)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of recomendacions</returns>
			public recomendacionCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of recomendacions</returns>
			public recomendacionCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				recomendacionCollection retCollection = new recomendacionCollection();
				
				foreach( recomendacion _recomendacion in List)
				{
					if ( Match(comparer,_recomendacion[property] , searchValue) ) 
						retCollection.Add( _recomendacion );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public recomendacionCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public recomendacionCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (recomendacionCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public recomendacion FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public recomendacion FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( recomendacion _recomendacion in List)
				{
					if ( Match(comparer,_recomendacion[property] , searchValue) ) 
						return _recomendacion;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a recomendacion to the collection.
			/// </summary>
			/// <param name="newrecomendacion">Adds a recomendacion to the collection</param>
			public int Add( recomendacion newrecomendacion)
			{
				return List.Add( newrecomendacion );
			}

		/// <summary>
		/// Find a recomendacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.id , searchValue) ) 
					return _recomendacion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a recomendacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a recomendacion by the property idmaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByidmaquina( System.String searchValue )
		{
			return FindByidmaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property idmaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByidmaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.idmaquina , searchValue) ) 
					return _recomendacion;
			}
			
			return null;
		}
		/// <summary>
		/// Find a recomendacion by the property Propertyrecomendacion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByPropertyrecomendacion( System.String searchValue )
		{
			return FindByPropertyrecomendacion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property Propertyrecomendacion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByPropertyrecomendacion( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.Propertyrecomendacion , searchValue) ) 
					return _recomendacion;
			}
			
			return null;
		}
		/// <summary>
		/// Find a recomendacion by the property tipo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindBytipo( System.String searchValue )
		{
			return FindBytipo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property tipo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindBytipo( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.tipo , searchValue) ) 
					return _recomendacion;
			}
			
			return null;
		}
		/// <summary>
		/// Find a recomendacion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.estado , searchValue) ) 
					return _recomendacion;
			}
			
			return null;
		}


		/// <summary>
		/// Find a recomendacion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a recomendacion by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An recomendacion if found, or null</returns>
		public	recomendacion	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			recomendacionCollection retCollection = new recomendacionCollection();

			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.id , searchValue) ) 
					retCollection.Add( _recomendacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idmaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByidmaquina( System.String searchValue )
		{
			return FilterByidmaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idmaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByidmaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			recomendacionCollection retCollection = new recomendacionCollection();

			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.idmaquina , searchValue) ) 
					retCollection.Add( _recomendacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property Propertyrecomendacion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByPropertyrecomendacion( System.String searchValue )
		{
			return FilterByPropertyrecomendacion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property Propertyrecomendacion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByPropertyrecomendacion( System.String searchValue, OrmLib.CompareType comparer )
		{
			recomendacionCollection retCollection = new recomendacionCollection();

			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.Propertyrecomendacion , searchValue) ) 
					retCollection.Add( _recomendacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property tipo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterBytipo( System.String searchValue )
		{
			return FilterBytipo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property tipo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterBytipo( System.String searchValue, OrmLib.CompareType comparer )
		{
			recomendacionCollection retCollection = new recomendacionCollection();

			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.tipo , searchValue) ) 
					retCollection.Add( _recomendacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			recomendacionCollection retCollection = new recomendacionCollection();

			foreach( recomendacion _recomendacion in List)
			{
				if ( Match(comparer,_recomendacion.estado , searchValue) ) 
					retCollection.Add( _recomendacion );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A recomendacionCollection of recomendacions</returns>
		public	recomendacionCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a recomendacion by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	recomendacionCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (recomendacionCollection)this;
		}

		/// <summary>
		/// Sorts a recomendacion by the property idmaquina.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	recomendacionCollection	SortByidmaquina ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idmaquina"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (recomendacionCollection)this;
		}

		/// <summary>
		/// Sorts a recomendacion by the property Propertyrecomendacion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	recomendacionCollection	SortByPropertyrecomendacion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("Propertyrecomendacion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (recomendacionCollection)this;
		}

		/// <summary>
		/// Sorts a recomendacion by the property tipo.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	recomendacionCollection	SortBytipo ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("tipo"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (recomendacionCollection)this;
		}

		/// <summary>
		/// Sorts a recomendacion by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	recomendacionCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (recomendacionCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of rols that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(rol))]
		public abstract class rolCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public rolCollectionOrmTemplate() : base(typeof(rol)){}

			/// <summary>
			/// Gets or sets the <see cref="rol"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public rol this[int index]
			{
				get
				{
					return (rol)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of rols</returns>
			public rolCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of rols</returns>
			public rolCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				rolCollection retCollection = new rolCollection();
				
				foreach( rol _rol in List)
				{
					if ( Match(comparer,_rol[property] , searchValue) ) 
						retCollection.Add( _rol );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public rolCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public rolCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (rolCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public rol FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public rol FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( rol _rol in List)
				{
					if ( Match(comparer,_rol[property] , searchValue) ) 
						return _rol;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a rol to the collection.
			/// </summary>
			/// <param name="newrol">Adds a rol to the collection</param>
			public int Add( rol newrol)
			{
				return List.Add( newrol );
			}

		/// <summary>
		/// Find a rol by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a rol by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( rol _rol in List)
			{
				if ( Match(comparer,_rol.id , searchValue) ) 
					return _rol;
			}
			
			return null;
		}


		/// <summary>
		/// Find a rol by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a rol by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a rol by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindBynombre( System.String searchValue )
		{
			return FindBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a rol by the property nombre.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( rol _rol in List)
			{
				if ( Match(comparer,_rol.nombre , searchValue) ) 
					return _rol;
			}
			
			return null;
		}
		/// <summary>
		/// Find a rol by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a rol by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( rol _rol in List)
			{
				if ( Match(comparer,_rol.estado , searchValue) ) 
					return _rol;
			}
			
			return null;
		}


		/// <summary>
		/// Find a rol by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a rol by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An rol if found, or null</returns>
		public	rol	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			rolCollection retCollection = new rolCollection();

			foreach( rol _rol in List)
			{
				if ( Match(comparer,_rol.id , searchValue) ) 
					retCollection.Add( _rol );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterBynombre( System.String searchValue )
		{
			return FilterBynombre( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property nombre.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterBynombre( System.String searchValue, OrmLib.CompareType comparer )
		{
			rolCollection retCollection = new rolCollection();

			foreach( rol _rol in List)
			{
				if ( Match(comparer,_rol.nombre , searchValue) ) 
					retCollection.Add( _rol );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			rolCollection retCollection = new rolCollection();

			foreach( rol _rol in List)
			{
				if ( Match(comparer,_rol.estado , searchValue) ) 
					retCollection.Add( _rol );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A rolCollection of rols</returns>
		public	rolCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a rol by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	rolCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (rolCollection)this;
		}

		/// <summary>
		/// Sorts a rol by the property nombre.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	rolCollection	SortBynombre ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("nombre"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (rolCollection)this;
		}

		/// <summary>
		/// Sorts a rol by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	rolCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (rolCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of solicituds that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(solicitud))]
		public abstract class solicitudCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public solicitudCollectionOrmTemplate() : base(typeof(solicitud)){}

			/// <summary>
			/// Gets or sets the <see cref="solicitud"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public solicitud this[int index]
			{
				get
				{
					return (solicitud)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of solicituds</returns>
			public solicitudCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of solicituds</returns>
			public solicitudCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				solicitudCollection retCollection = new solicitudCollection();
				
				foreach( solicitud _solicitud in List)
				{
					if ( Match(comparer,_solicitud[property] , searchValue) ) 
						retCollection.Add( _solicitud );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public solicitudCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public solicitudCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (solicitudCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public solicitud FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public solicitud FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( solicitud _solicitud in List)
				{
					if ( Match(comparer,_solicitud[property] , searchValue) ) 
						return _solicitud;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a solicitud to the collection.
			/// </summary>
			/// <param name="newsolicitud">Adds a solicitud to the collection</param>
			public int Add( solicitud newsolicitud)
			{
				return List.Add( newsolicitud );
			}

		/// <summary>
		/// Find a solicitud by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.id , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}


		/// <summary>
		/// Find a solicitud by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a solicitud by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByidusuario( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByidusuario( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.idusuario , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}


		/// <summary>
		/// Find a solicitud by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByidusuario( string searchValue )
		{
			return FindByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property idusuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByidusuario( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a solicitud by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByfecha( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FindByfecha( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByfecha( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.fecha , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}


		/// <summary>
		/// Find a solicitud by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByfecha( string searchValue )
		{
			return FindByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property fecha.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByfecha( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a solicitud by the property observacion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByobservacion( System.String searchValue )
		{
			return FindByobservacion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property observacion.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByobservacion( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.observacion , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}
		/// <summary>
		/// Find a solicitud by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.estado , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}


		/// <summary>
		/// Find a solicitud by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a solicitud by the property tipo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindBytipo( System.String searchValue )
		{
			return FindBytipo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property tipo.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindBytipo( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.tipo , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}
		/// <summary>
		/// Find a solicitud by the property idMaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByidMaquina( System.String searchValue )
		{
			return FindByidMaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property idMaquina.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByidMaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.idMaquina , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}
		/// <summary>
		/// Find a solicitud by the property estado_solicitud.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByestado_solicitud( System.String searchValue )
		{
			return FindByestado_solicitud( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a solicitud by the property estado_solicitud.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An solicitud if found, or null</returns>
		public	solicitud	FindByestado_solicitud( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.estado_solicitud , searchValue) ) 
					return _solicitud;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.id , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByidusuario( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByidusuario( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.idusuario , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByidusuario( string searchValue )
		{
			return FilterByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idusuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByidusuario( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidusuario( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByfecha( System.Data.SqlTypes.SqlDateTime searchValue )
		{
			return FilterByfecha( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByfecha( System.Data.SqlTypes.SqlDateTime searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.fecha , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByfecha( string searchValue )
		{
			return FilterByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property fecha.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByfecha( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByfecha( System.Data.SqlTypes.SqlDateTime.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property observacion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByobservacion( System.String searchValue )
		{
			return FilterByobservacion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property observacion.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByobservacion( System.String searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.observacion , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.estado , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property tipo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterBytipo( System.String searchValue )
		{
			return FilterBytipo( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property tipo.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterBytipo( System.String searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.tipo , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property idMaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByidMaquina( System.String searchValue )
		{
			return FilterByidMaquina( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idMaquina.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByidMaquina( System.String searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.idMaquina , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property estado_solicitud.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByestado_solicitud( System.String searchValue )
		{
			return FilterByestado_solicitud( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado_solicitud.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A solicitudCollection of solicituds</returns>
		public	solicitudCollection	FilterByestado_solicitud( System.String searchValue, OrmLib.CompareType comparer )
		{
			solicitudCollection retCollection = new solicitudCollection();

			foreach( solicitud _solicitud in List)
			{
				if ( Match(comparer,_solicitud.estado_solicitud , searchValue) ) 
					retCollection.Add( _solicitud );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a solicitud by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property idusuario.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByidusuario ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idusuario"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property fecha.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByfecha ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("fecha"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property observacion.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByobservacion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("observacion"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property tipo.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortBytipo ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("tipo"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property idMaquina.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByidMaquina ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idMaquina"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}

		/// <summary>
		/// Sorts a solicitud by the property estado_solicitud.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	solicitudCollection	SortByestado_solicitud ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado_solicitud"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (solicitudCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of sysdiagramss that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(sysdiagrams))]
		public abstract class sysdiagramsCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public sysdiagramsCollectionOrmTemplate() : base(typeof(sysdiagrams)){}

			/// <summary>
			/// Gets or sets the <see cref="sysdiagrams"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public sysdiagrams this[int index]
			{
				get
				{
					return (sysdiagrams)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of sysdiagramss</returns>
			public sysdiagramsCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of sysdiagramss</returns>
			public sysdiagramsCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				sysdiagramsCollection retCollection = new sysdiagramsCollection();
				
				foreach( sysdiagrams _sysdiagrams in List)
				{
					if ( Match(comparer,_sysdiagrams[property] , searchValue) ) 
						retCollection.Add( _sysdiagrams );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public sysdiagramsCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public sysdiagramsCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (sysdiagramsCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public sysdiagrams FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public sysdiagrams FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( sysdiagrams _sysdiagrams in List)
				{
					if ( Match(comparer,_sysdiagrams[property] , searchValue) ) 
						return _sysdiagrams;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a sysdiagrams to the collection.
			/// </summary>
			/// <param name="newsysdiagrams">Adds a sysdiagrams to the collection</param>
			public int Add( sysdiagrams newsysdiagrams)
			{
				return List.Add( newsysdiagrams );
			}

		/// <summary>
		/// Find a sysdiagrams by the property name.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByname( System.String searchValue )
		{
			return FindByname( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property name.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByname( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.name , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}
		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByprincipal_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.principal_id , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}


		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( string searchValue )
		{
			return FindByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property principal_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByprincipal_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( System.Int32 searchValue )
		{
			return FindBydiagram_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.diagram_id , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}


		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( string searchValue )
		{
			return FindBydiagram_id( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property diagram_id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydiagram_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FindBydiagram_id( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByversion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.version , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}


		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( string searchValue )
		{
			return FindByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property version.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindByversion( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a sysdiagrams by the property definition.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydefinition( System.Data.SqlTypes.SqlBinary searchValue )
		{
			return FindBydefinition( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a sysdiagrams by the property definition.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An sysdiagrams if found, or null</returns>
		public	sysdiagrams	FindBydefinition( System.Data.SqlTypes.SqlBinary searchValue, OrmLib.CompareType comparer )
		{
			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.definition , searchValue) ) 
					return _sysdiagrams;
			}
			
			return null;
		}

		/// <summary>
		/// Filter by the property name.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByname( System.String searchValue )
		{
			return FilterByname( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property name.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByname( System.String searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.name , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByprincipal_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.principal_id , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( string searchValue )
		{
			return FilterByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property principal_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByprincipal_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByprincipal_id( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( System.Int32 searchValue )
		{
			return FilterBydiagram_id( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.diagram_id , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( string searchValue )
		{
			return FilterBydiagram_id( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property diagram_id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydiagram_id( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterBydiagram_id( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByversion( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.version , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( string searchValue )
		{
			return FilterByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property version.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterByversion( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByversion( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property definition.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydefinition( System.Data.SqlTypes.SqlBinary searchValue )
		{
			return FilterBydefinition( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property definition.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A sysdiagramsCollection of sysdiagramss</returns>
		public	sysdiagramsCollection	FilterBydefinition( System.Data.SqlTypes.SqlBinary searchValue, OrmLib.CompareType comparer )
		{
			sysdiagramsCollection retCollection = new sysdiagramsCollection();

			foreach( sysdiagrams _sysdiagrams in List)
			{
				if ( Match(comparer,_sysdiagrams.definition , searchValue) ) 
					retCollection.Add( _sysdiagrams );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}
		/// <summary>
		/// Sorts a sysdiagrams by the property name.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortByname ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("name"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property principal_id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortByprincipal_id ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("principal_id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property diagram_id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortBydiagram_id ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("diagram_id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property version.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortByversion ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("version"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}

		/// <summary>
		/// Sorts a sysdiagrams by the property definition.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	sysdiagramsCollection	SortBydefinition ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("definition"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (sysdiagramsCollection)this;
		}


		}


		/// <summary>
		///	Holds a collection of Usuarios that can be searched and enumerated.
		/// </summary>
		[OrmLib.TypedCollection(typeof(Usuario))]
		public abstract class UsuarioCollectionOrmTemplate : OrmLib.CollectionTemplate
		{
			/// <summary>
			/// Default constructor.
			/// </summary>
			public UsuarioCollectionOrmTemplate() : base(typeof(Usuario)){}

			/// <summary>
			/// Gets or sets the <see cref="Usuario"/> at the specified index.
			/// In C#, this property is the indexer for the IList interface.
			/// </summary>
			public Usuario this[int index]
			{
				get
				{
					return (Usuario)List[index];
				}
				set
				{
					throw new System.NotSupportedException("Please use the Add() method."); 
				} 
			}	

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <returns>A collection of Usuarios</returns>
			public UsuarioCollection FilterBy( string property, object searchValue )
			{
				return FilterBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Filter by the provided property name
			/// </summary>
			/// <param name="property">The property to filter on</param>
			/// <param name="searchValue">The value to search for</param>
			/// <param name="comparer">How to compare the property to the search value</param>
			/// <returns>A collection of Usuarios</returns>
			public UsuarioCollection FilterBy( string property, object searchValue, OrmLib.CompareType comparer )
			{
				UsuarioCollection retCollection = new UsuarioCollection();
				
				foreach( Usuario _Usuario in List)
				{
					if ( Match(comparer,_Usuario[property] , searchValue) ) 
						retCollection.Add( _Usuario );
				}
			
				return retCollection;
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <returns></returns>
			public UsuarioCollection SortBy( string property )
			{
				return SortBy( property, OrmLib.SortDirection.Ascending );
			}

			/// <summary>
			/// Returns a sorted collection based on the supplied property name.
			/// </summary>
			/// <param name="property">The property to sort by</param>
			/// <param name="sortDirection"></param>
			/// <returns></returns>
			public UsuarioCollection SortBy( string property, OrmLib.SortDirection sortDirection )
			{
				InnerList.Sort( new OrmLib.ObjectPropertyComparer(property));
				if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
				return (UsuarioCollection)this;
			}

		
			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <returns></returns>
			public Usuario FindBy( string property, object searchValue )
			{
				return FindBy(property, searchValue, OrmLib.CompareType.Exact);
			}

			/// <summary>
			/// Find the first in the collection, based on the
			/// supplied property.
			/// </summary>
			/// <param name="property">The property to find by</param>
			/// <param name="searchValue"></param>
			/// <param name="comparer"></param>
			/// <returns></returns>
			public Usuario FindBy( string property, object searchValue, OrmLib.CompareType comparer )
			{				
				foreach( Usuario _Usuario in List)
				{
					if ( Match(comparer,_Usuario[property] , searchValue) ) 
						return _Usuario;
				}
			
				return null;
			}
			
			/// <summary>
			/// Adds a Usuario to the collection.
			/// </summary>
			/// <param name="newUsuario">Adds a Usuario to the collection</param>
			public int Add( Usuario newUsuario)
			{
				return List.Add( newUsuario );
			}

		/// <summary>
		/// Find a Usuario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByid( System.Int32 searchValue )
		{
			return FindByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.id , searchValue) ) 
					return _Usuario;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Usuario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByid( string searchValue )
		{
			return FindByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property id.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByid( System.Int32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Usuario by the property usuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByusuario( System.String searchValue )
		{
			return FindByusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property usuario.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByusuario( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.usuario , searchValue) ) 
					return _Usuario;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Usuario by the property password.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindBypassword( System.String searchValue )
		{
			return FindBypassword( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property password.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindBypassword( System.String searchValue, OrmLib.CompareType comparer )
		{
			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.password , searchValue) ) 
					return _Usuario;
			}
			
			return null;
		}
		/// <summary>
		/// Find a Usuario by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByidrol( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FindByidrol( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByidrol( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.idrol , searchValue) ) 
					return _Usuario;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Usuario by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByidrol( string searchValue )
		{
			return FindByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property idrol.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByidrol( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}		/// <summary>
		/// Find a Usuario by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FindByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.estado , searchValue) ) 
					return _Usuario;
			}
			
			return null;
		}


		/// <summary>
		/// Find a Usuario by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByestado( string searchValue )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Find a Usuario by the property estado.
		/// returns null if not found.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>An Usuario if found, or null</returns>
		public	Usuario	FindByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FindByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByid( System.Int32 searchValue )
		{
			return FilterByid( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByid( System.Int32 searchValue, OrmLib.CompareType comparer )
		{
			UsuarioCollection retCollection = new UsuarioCollection();

			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.id , searchValue) ) 
					retCollection.Add( _Usuario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByid( string searchValue )
		{
			return FilterByid( System.Int32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property id.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByid( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByid( System.Int32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property usuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByusuario( System.String searchValue )
		{
			return FilterByusuario( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property usuario.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByusuario( System.String searchValue, OrmLib.CompareType comparer )
		{
			UsuarioCollection retCollection = new UsuarioCollection();

			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.usuario , searchValue) ) 
					retCollection.Add( _Usuario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property password.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterBypassword( System.String searchValue )
		{
			return FilterBypassword( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property password.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterBypassword( System.String searchValue, OrmLib.CompareType comparer )
		{
			UsuarioCollection retCollection = new UsuarioCollection();

			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.password , searchValue) ) 
					retCollection.Add( _Usuario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}

		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByidrol( System.Data.SqlTypes.SqlInt32 searchValue )
		{
			return FilterByidrol( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByidrol( System.Data.SqlTypes.SqlInt32 searchValue, OrmLib.CompareType comparer )
		{
			UsuarioCollection retCollection = new UsuarioCollection();

			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.idrol , searchValue) ) 
					retCollection.Add( _Usuario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByidrol( string searchValue )
		{
			return FilterByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property idrol.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByidrol( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByidrol( System.Data.SqlTypes.SqlInt32.Parse(searchValue),comparer );
		}
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue )
		{
			return FilterByestado( searchValue, OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByestado( System.Data.SqlTypes.SqlBoolean searchValue, OrmLib.CompareType comparer )
		{
			UsuarioCollection retCollection = new UsuarioCollection();

			foreach( Usuario _Usuario in List)
			{
				if ( Match(comparer,_Usuario.estado , searchValue) ) 
					retCollection.Add( _Usuario );
			}
			
			retCollection.Parent = this.Parent;

			return retCollection;
		}


		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByestado( string searchValue )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue), OrmLib.CompareType.Exact );
		}
		
		/// <summary>
		/// Filter by the property estado.
		/// </summary>
		/// <param name="searchValue">The value to search for</param>
		/// <param name="comparer">What sort of comparison should be made</param>
		/// <returns>A UsuarioCollection of Usuarios</returns>
		public	UsuarioCollection	FilterByestado( string searchValue, OrmLib.CompareType comparer )
		{
			return FilterByestado( System.Data.SqlTypes.SqlBoolean.Parse(searchValue),comparer );
		}		/// <summary>
		/// Sorts a Usuario by the property id.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsuarioCollection	SortByid ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("id"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsuarioCollection)this;
		}

		/// <summary>
		/// Sorts a Usuario by the property usuario.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsuarioCollection	SortByusuario ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("usuario"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsuarioCollection)this;
		}

		/// <summary>
		/// Sorts a Usuario by the property password.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsuarioCollection	SortBypassword ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("password"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsuarioCollection)this;
		}

		/// <summary>
		/// Sorts a Usuario by the property idrol.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsuarioCollection	SortByidrol ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("idrol"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsuarioCollection)this;
		}

		/// <summary>
		/// Sorts a Usuario by the property estado.
		/// </summary>
		/// <param name="sortDirection">The direction to sort in</param>
		/// <returns>The collection in sorted order</returns>
		public	UsuarioCollection	SortByestado ( OrmLib.SortDirection sortDirection )
		{
			InnerList.Sort( new OrmLib.ObjectPropertyComparer("estado"));
			if (sortDirection == OrmLib.SortDirection.Descending) InnerList.Reverse();
			return (UsuarioCollection)this;
		}


		}




}